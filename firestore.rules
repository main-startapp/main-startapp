rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Allow public read access
    // creator or bypass_code can update
    // only creator can delete
    match /projects/{project} {
      allow read: if true
      allow create: if request.auth != null && request.resource != null && request.auth.uid == request.resource.data.creator_uid
      allow update: if request.auth != null && request.resource != null && (request.auth.uid == resource.data.creator_uid || request.resource.data.bypass_code == "Ig9yjfC06Q4aIO7r")
      allow delete: if request.auth != null && request.auth.uid == resource.data.creator_uid
    }

    // Project members can read. Transferable project can be read by all users.
    // existing members can update
    // only admins can delete
    match /projects_ext/{project_ext} {
      allow read: if request.auth != null && (request.auth.uid in resource.data.members || resource.data.transfer_code != null)
      allow create: if request.auth != null && request.resource != null && request.auth.uid in request.resource.data.admins && request.auth.uid in request.resource.data.members
      allow update: if request.auth != null && request.resource != null && request.auth.uid in resource.data.members 
      allow delete: if request.auth != null && request.auth.uid in resource.data.admins
    }
    match /projects_ext/{project_ext}/join_requests/{join_request} {
      allow read, write: if request.auth != null
    }

    // Allow public read access
    // creator or bypass_code can update
    // only creator can delete
    // !todo: for now it works like projects but further attention required as the creator is more like an org
    match /events/{event} {
      allow read: if true
      allow create: if request.auth != null && request.resource != null && request.auth.uid == request.resource.data.creator_uid
      allow update: if request.auth != null && request.resource != null && (request.auth.uid == resource.data.creator_uid || request.resource.data.bypass_code == "Ig9yjfC06Q4aIO7r")
      allow delete: if request.auth != null && request.auth.uid == resource.data.creator_uid
    }

    // Event members can read. Transferable project can be read by all users.
    // existing members can update
    // only admins can delete
    // !todo: for now it works like projects but further attention required as the creator is more like an org
    match /events_ext/{event_ext} {
      allow read: if request.auth != null && (request.auth.uid in resource.data.members || resource.data.transfer_code != null)
      allow create: if request.auth != null && request.resource != null && request.auth.uid in request.resource.data.admins && request.auth.uid in request.resource.data.members
      allow update: if request.auth != null && request.resource != null && request.auth.uid in resource.data.members
      allow delete: if request.auth != null && request.auth.uid in resource.data.admins
    }

    // only members can read
    // only admin can write
    match /organizations/{org} {
      allow read: if request.auth != null 
      allow create: if request.auth != null && request.resource != null && request.auth.uid == request.resource.data.admin_uid && request.auth.uid in request.resource.data.representatives
      allow update: if request.auth != null && request.resource != null && request.auth.uid == resource.data.admin_uid
      allow delete: if false
    }

    // Allow public read access, only owner can write, nobody can delete
    match /users/{user} {
      allow read: if true
      allow create, update: if request.auth != null && request.resource != null && request.auth.uid == request.resource.id
      allow delete: if false
    }

    // Only owner can read, write, nobody can delete
    match /users_ext/{user_ext} {
      allow read: if request.auth != null && request.auth.uid == resource.id
      allow create, update: if request.auth != null && request.resource != null && request.auth.uid == request.resource.id
      allow delete: if false
    }

    //
    match /user_created_lists/{user_created_list} {
      allow read, update: if request.auth != null
      allow create, delete: if false
    }

    // v1
    match /chats/{chat} {
      allow read: if request.auth != null && request.auth.uid in resource.data.chat_user_ids
      allow write: if request.auth != null
    }
    match /chats/{chat}/messages/{message} {
      allow read, write: if request.auth != null
    }
  }
}
