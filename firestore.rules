rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Allow public read access, only content owners can write and delete
    match /projects/{project} {
      allow read: if true
      allow create, update: if request.auth != null && request.resource != null && (request.auth.uid == request.resource.data.creator_uid || request.resource.data.bypass_code == "Ig9yjfC06Q4aIO7r")
      allow delete: if request.auth != null && request.auth.uid == resource.data.creator_uid
    }

    // Only permitted user can read, write; only admins can delete
    match /projects_ext/{project_ext} {
      allow read: if request.auth != null && (request.auth.uid in resource.data.members || resource.data.transfer_code != null)
      allow create, update: if request.auth != null && request.resource != null && request.auth.uid in request.resource.data.members 
      allow delete: if request.auth != null && request.auth.uid in resource.data.admins
    }
    match /projects_ext/{project_ext}/join_requests/{join_request} {
      allow read: if request.auth != null
      allow write: if request.auth != null
    }

    // Allow public read access, only content owners can write and delete
    // !todo: for now it works like projects but further attentio required as the creator is more like an org
    match /events/{event} {
      allow read: if true
      allow create, update: if request.auth != null && request.resource != null && (request.auth.uid == request.resource.data.creator_uid || request.resource.data.bypass_code == "Ig9yjfC06Q4aIO7r")
      allow delete: if request.auth != null && request.auth.uid == resource.data.creator_uid
    }
    // Only permitted user can read, write; only admins can delete
    // !todo: for now it works like projects but further attention required as the creator is more like an org
    match /events_ext/{event_ext} {
      allow read: if request.auth != null && (request.auth.uid in resource.data.members || resource.data.transfer_code != null)
      allow create, update: if request.auth != null && request.resource != null && request.auth.uid in request.resource.data.members 
      allow delete: if request.auth != null && request.auth.uid in resource.data.admins
    }

    // Allow public read access, only owner can write, nobody can delete
    match /students/{student} {
      allow read: if true
      allow create, update: if request.auth != null && request.resource != null && request.auth.uid == request.resource.id
    }

    match /users/{user} {
      allow read: if true
      allow create, update: if request.auth != null && request.resource != null && request.auth.uid == request.resource.id
    }

    // Only owner can read, write, nobody can delete
    match /students_ext/{student_ext} {
      allow read: if request.auth != null && request.auth.uid == resource.id
      allow create, update: if request.auth != null && request.resource != null && request.auth.uid == request.resource.id
    }

    match /users_ext/{user_ext} {
      allow read: if request.auth != null && request.auth.uid == resource.id
      allow create, update: if request.auth != null && request.resource != null && request.auth.uid == request.resource.id
    }

    // debug only
    match /chats/{chat} {
      allow read: if request.auth != null
      allow write: if request.auth != null
    }
    match /chats/{chat}/messages/{message} {
      allow read: if request.auth != null
      allow write: if request.auth != null
    }
  }
}
